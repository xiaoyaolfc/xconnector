# deployments/docker/Dockerfile.xconnector-service
FROM python:3.12-slim

WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    git \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Install torch CPU version first
RUN pip install --no-cache-dir torch --index-url https://download.pytorch.org/whl/cpu

# Install core dependencies manually (skip setup.py completely)
RUN pip install --no-cache-dir \
    numpy \
    pydantic \
    PyYAML \
    asyncio-mqtt \
    aiofiles \
    httpx \
    requests \
    fastapi \
    uvicorn[standard] \
    psutil \
    etcd3-py \
    nats-py

# Copy source code directly (NO setup.py installation)
COPY xconnector/ ./xconnector/
COPY integrations/ ./integrations/

# Create logs directory
RUN mkdir -p /app/logs

# Create the service runner script that works without package installation
RUN cat > /app/run_service.py << 'EOF'
#!/usr/bin/env python3
import os
import sys
import logging

# Add all necessary paths to Python path
sys.path.insert(0, "/app")
sys.path.insert(0, "/app/xconnector")
sys.path.insert(0, "/app/integrations")

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def create_xconnector_service():
    """Create XConnector service with fallback"""
    from fastapi import FastAPI
    from fastapi.responses import JSONResponse

    app = FastAPI(title="XConnector Service", version="1.0.0")

    # Try to import XConnector components
    xconnector_available = False
    try:
        # Test import of core XConnector components
        from xconnector.core.connector import XConnector
        from xconnector.utils.config import ConnectorConfig
        xconnector_available = True
        logger.info("XConnector core components imported successfully")
    except Exception as e:
        logger.warning(f"XConnector core components not available: {e}")

    @app.get("/health")
    async def health_check():
        return {
            "status": "healthy",
            "service": "xconnector",
            "xconnector_available": xconnector_available,
            "mode": "service"
        }

    @app.get("/status")
    async def get_status():
        status = {
            "service": {
                "name": "xconnector",
                "version": "1.0.0",
                "status": "running"
            },
            "xconnector": {
                "available": xconnector_available,
                "mode": "remote"
            }
        }

        if xconnector_available:
            try:
                # Try to create a connector instance
                config = ConnectorConfig()
                connector = XConnector(config)
                status["xconnector"]["status"] = "initialized"
            except Exception as e:
                status["xconnector"]["status"] = f"error: {e}"

        return status

    @app.get("/adapters")
    async def list_adapters():
        """List available adapters"""
        return {
            "adapters": {
                "inference": [],
                "cache": [],
                "distributed": []
            },
            "message": "XConnector service ready for adapter registration"
        }

    @app.post("/route")
    async def route_request(request: dict):
        """Route request endpoint"""
        if not xconnector_available:
            return {
                "status": "error",
                "error": "XConnector core not available"
            }

        # Simple routing logic
        return {
            "status": "success",
            "result": "Request processed",
            "request_id": request.get("source", "unknown")
        }

    @app.get("/")
    async def root():
        return {
            "message": "XConnector Service",
            "version": "1.0.0",
            "available_endpoints": [
                "/health",
                "/status",
                "/adapters",
                "/route"
            ]
        }

    return app

def main():
    """Main service entry point"""
    try:
        logger.info("Starting XConnector service...")
        app = create_xconnector_service()

        # Start server
        import uvicorn

        port = int(os.getenv("XCONNECTOR_PORT", "8081"))
        log_level = os.getenv("LOG_LEVEL", "info").lower()

        logger.info(f"Starting server on port {port}")

        uvicorn.run(
            app,
            host="0.0.0.0",
            port=port,
            log_level=log_level
        )

    except Exception as e:
        logger.error(f"Failed to start service: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)

if __name__ == "__main__":
    main()
EOF

RUN chmod +x /app/run_service.py

EXPOSE 8081

# Set environment variables
ENV PYTHONPATH="/app:/app/xconnector:/app/integrations"
ENV XCONNECTOR_HOME="/app"

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:8081/health || exit 1

CMD ["python", "/app/run_service.py"]