version: '3.8'

services:
  xconnector-service:
    image: xconnector-service:latest
    container_name: xconnector-service
    environment:
      - ETCD_HOST=etcd
      - ETCD_PORT=2379
      - NATS_URL=nats://nats:4222
      - XCONNECTOR_PORT=8081
      - LOG_LEVEL=INFO
      - PYTHONPATH=/app
    networks:
      - xconnector-net
    ports:
      - "8081:8081"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    volumes:
      - xconnector-logs:/app/logs
      - ../../integrations/dynamo/configs/xconnector_config.yaml:/app/configs/xconnector_config.yaml:ro
    restart: unless-stopped
    depends_on:
      - etcd
      - nats

  etcd:
    image: bitnami/etcd:auth-online
    container_name: etcd
    environment:
      - ALLOW_NONE_AUTHENTICATION=yes
      - ETCD_ADVERTISE_CLIENT_URLS=http://etcd:2379
      - ETCD_LISTEN_CLIENT_URLS=http://0.0.0.0:2379
      - ETCD_LISTEN_PEER_URLS=http://0.0.0.0:2380
      - ETCD_INITIAL_ADVERTISE_PEER_URLS=http://etcd:2380
      - ETCD_INITIAL_CLUSTER=etcd=http://etcd:2380
      - ETCD_NAME=etcd
      - ETCD_INITIAL_CLUSTER_TOKEN=etcd-cluster
      - ETCD_INITIAL_CLUSTER_STATE=new
    networks:
      - xconnector-net
    ports:
      - "2379:2379"
      - "2380:2380"
    volumes:
      - etcd-data:/bitnami/etcd/data
    restart: unless-stopped

  nats:
    image: nats:latest
    container_name: nats
    networks:
      - xconnector-net
    ports:
      - "4222:4222"
      - "8222:8222"
    command: ["-js", "-m", "8222"]
    restart: unless-stopped

  dynamo-worker:
    image: dynamo-nvidia:v0.3.0-vllm0.8.4-lmcache0.2.1-inline
    container_name: dynamo-worker
    runtime: nvidia
    environment:
      - NVIDIA_VISIBLE_DEVICES=all
      - ENABLE_XCONNECTOR=true
      - XCONNECTOR_SERVICE_URL=http://xconnector-service:8081
      - XCONNECTOR_FAIL_ON_ERROR=false
      - ETCD_USERNAME=
      - ETCD_PASSWORD=
      - ETCD_USER=
      - ETCD_AUTH_TOKEN=
      - PYTHONPATH=/workspace:/opt/dynamo/examples/llm:/workspace/xconnector-integration
      - PATH=/opt/dynamo/venv/bin:/usr/local/nvidia/bin:/usr/local/cuda/bin:/usr/local/bin:/usr/bin:/bin
      - LOG_LEVEL=INFO
    networks:
      - xconnector-net
    ports:
      - "8000:8000"
    volumes:
      - ../../integrations/dynamo/configs/disagg_with_xconnector.yaml:/workspace/configs/disagg.yaml:ro
      - ../../integrations/dynamo/startup-wrapper.py:/workspace/startup-wrapper.py:ro
      - xconnector-integration:/workspace/xconnector-integration
      - ../../integrations/dynamo/extension_loader.py:/tmp/extension_loader.py:ro
      - ../../integrations/dynamo/registry.py:/tmp/registry.py:ro
      - ../../integrations/dynamo/__init__.py:/tmp/__init__.py:ro
      - dynamo-logs:/workspace/logs
      - model-cache:/workspace/models
    working_dir: /workspace/examples/llm
    command: [
      "bash", "-c",
      "echo 'Creating simple proxy...' &&
       python3 -c \"
import socket, threading, sys

def proxy(local_port, target_host, target_port):
    def handle_client(client_socket):
        try:
            server_socket = socket.socket()
            server_socket.connect((target_host, target_port))
            def forward(src, dst):
                while True:
                    try:
                        data = src.recv(4096)
                        if not data: break
                        dst.send(data)
                    except: break
            threading.Thread(target=forward, args=(client_socket, server_socket), daemon=True).start()
            threading.Thread(target=forward, args=(server_socket, client_socket), daemon=True).start()
        except Exception as e:
            print(f'Proxy error: {e}')
            client_socket.close()
    
    server = socket.socket()
    server.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    server.bind(('127.0.0.1', local_port))
    server.listen(5)
    print(f'Proxy {local_port} -> {target_host}:{target_port}')
    while True:
        client, addr = server.accept()
        threading.Thread(target=handle_client, args=(client,), daemon=True).start()

if __name__ == '__main__':
    proxy(int(sys.argv[1]), sys.argv[2], int(sys.argv[3]))
\" 2379 etcd 2379 &
       python3 -c \"
import socket, threading, sys

def proxy(local_port, target_host, target_port):
    def handle_client(client_socket):
        try:
            server_socket = socket.socket()
            server_socket.connect((target_host, target_port))
            def forward(src, dst):
                while True:
                    try:
                        data = src.recv(4096)
                        if not data: break
                        dst.send(data)
                    except: break
            threading.Thread(target=forward, args=(client_socket, server_socket), daemon=True).start()
            threading.Thread(target=forward, args=(server_socket, client_socket), daemon=True).start()
        except Exception as e:
            print(f'Proxy error: {e}')
            client_socket.close()
    
    server = socket.socket()
    server.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    server.bind(('127.0.0.1', local_port))
    server.listen(5)
    print(f'Proxy {local_port} -> {target_host}:{target_port}')
    while True:
        client, addr = server.accept()
        threading.Thread(target=handle_client, args=(client,), daemon=True).start()

if __name__ == '__main__':
    proxy(int(sys.argv[1]), sys.argv[2], int(sys.argv[3]))
\" 4222 nats 4222 &
       sleep 3 &&
       echo 'Waiting for XConnector...' &&
       while ! curl -f http://xconnector-service:8081/health; do sleep 5; done &&
       echo 'Setting up integration...' &&
       mkdir -p /workspace/xconnector-integration &&
       cp /tmp/extension_loader.py /workspace/xconnector-integration/ &&
       cp /tmp/registry.py /workspace/xconnector-integration/ &&
       cp /tmp/__init__.py /workspace/xconnector-integration/ &&
       python /workspace/startup-wrapper.py &&
       echo 'Starting Dynamo...' &&
       /opt/dynamo/venv/bin/dynamo serve graphs.disagg:Frontend -f /workspace/configs/disagg.yaml"
    ]
    restart: unless-stopped
    depends_on:
      - xconnector-service
      - etcd
      - nats

networks:
  xconnector-net:
    driver: bridge

volumes:
  etcd-data:
    driver: local
  xconnector-logs:
    driver: local
  dynamo-logs:
    driver: local
  model-cache:
    driver: local
  xconnector-integration:
    driver: local